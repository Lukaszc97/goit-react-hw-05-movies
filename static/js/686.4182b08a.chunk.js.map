{"version":3,"file":"static/js/686.4182b08a.chunk.js","mappings":"+QACA,EAAwC,4CAAxC,EAAmG,mCAAnG,EAAwJ,sCAAxJ,EAAiN,uCAAjN,EAA2Q,uC,kBC+E3Q,MAxEA,WAAyB,IAAD,IACdA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwCE,EAAAA,EAAAA,UAAS,CAAC,GAAlD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAgCF,EAAAA,EAAAA,WAAS,GAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KACA,GAAsCJ,EAAAA,EAAAA,WAAS,GAA/C,eAAOK,EAAP,KAAoBC,EAApB,KACA,GAAkCN,EAAAA,EAAAA,UAAS,IAA3C,eAAOO,EAAP,KAAkBC,EAAlB,KAIMC,EAAY,qBAHDC,EAAAA,EAAAA,MAGaC,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,UAYvCC,GAAwBC,EAAAA,EAAAA,cAAW,iBAAC,8GAEnBC,EAAAA,EAAAA,IAAkBjB,GAFC,OAEhCkB,EAFgC,OAGtCd,EAAgBc,GAEZA,EAAKC,aACPT,EAAa,kCAAD,OAAmCQ,EAAKC,cANhB,gDAStCC,QAAQC,MAAR,MATsC,yDAWvC,CAACrB,IAMJ,OAJAsB,EAAAA,EAAAA,YAAU,WACRP,GACD,GAAE,CAACf,EAASe,IAERZ,GAAqD,IAArCoB,OAAOC,KAAKrB,GAAcsB,QAK7C,iBAAKC,UAAWC,EAAhB,WAEE,SAAC,KAAD,CAAMC,GAAIjB,EAAV,mBAEA,iBAAKe,UAAWC,EAAhB,UACGlB,IAAa,gBAAKoB,IAAKpB,EAAWqB,MAAM,QAAQC,IAAG,UAAK5B,EAAa6B,MAAlB,WAAkCN,UAAWC,KACjG,iBAAKD,UAAWC,EAAhB,WACE,2CACA,oCAAYxB,EAAa6B,UACzB,0CAAkB7B,EAAa8B,iBAC/B,sCAAc9B,EAAa+B,mBAI/B,iBAAKR,UAAWC,EAAhB,WACE,mBAAQQ,QA/CK,WACjB7B,GAAaD,GACbG,GAAe,EAChB,EA4CK,0BACA,mBAAQ2B,QA3CQ,WACpB3B,GAAgBD,GAChBD,GAAY,EACb,EAwCK,+BAGDD,IAAY,SAAC+B,EAAA,QAAD,IACZ7B,IAAe,SAAC8B,EAAA,QAAD,QAxBX,+CA2BV,C,yGCpCD,UAjCA,WACE,IAAQrC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOoC,EAAP,KAAaC,EAAb,KAeA,OAbAjB,EAAAA,EAAAA,YAAU,WACR,IAAMkB,EAAO,mCAAG,8GAEWC,EAAAA,EAAAA,IAAezC,GAF1B,OAEN0C,EAFM,OAGZH,EAAQG,GAHI,gDAKZtB,QAAQC,MAAR,MALY,yDAAH,qDASbmB,GACD,GAAE,CAACxC,KAGF,4BACE,kCACA,wBACGsC,EAAKK,KAAI,SAACC,GAAD,OACR,wBAAoBA,EAAMC,MAAjBD,EAAME,GADP,QAMjB,C,yGCSD,UApCA,WACE,IAAQ9C,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAO6C,EAAP,KAAgBC,EAAhB,KAEMC,GAAkBjC,EAAAA,EAAAA,cAAW,iBAAC,8GAEPkC,EAAAA,EAAAA,IAAkBlD,GAFX,OAE1BmD,EAF0B,OAGhCH,EAAWG,GAHqB,gDAKhC/B,QAAQC,MAAR,MALgC,yDAOjC,CAACrB,IAMJ,OAJAsB,EAAAA,EAAAA,YAAU,WACR2B,GACD,GAAE,CAACA,KAGF,4BACE,qCACA,wBACGF,EAAQJ,KAAI,SAACS,GAAD,OACX,2BACE,wBAAKA,EAAOC,UACZ,uBAAID,EAAOE,YAFJF,EAAON,GADL,QASpB,C","sources":["webpack://react-homework-template/./src/Page/MovieDetails/MovieDetails.module.css?8114","Page/MovieDetails/MovieDetails.jsx","components/Cast/Cast.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"movieDetailsContainer\":\"MovieDetails_movieDetailsContainer__2A4Jm\",\"boxContainer\":\"MovieDetails_boxContainer__RInSK\",\"posterContainer\":\"MovieDetails_posterContainer__TN1QW\",\"contentContainer\":\"MovieDetails_contentContainer__jSz4g\",\"buttonsContainer\":\"MovieDetails_buttonsContainer__w8EJ1\"};","import React, { useState, useEffect, useCallback } from 'react';\nimport { useParams, Link, useLocation} from 'react-router-dom';\nimport Cast from '../../components/Cast/Cast';\nimport Reviews from '../../components/Reviews/Reviews';\nimport styles from './MovieDetails.module.css';\nimport PropTypes from 'prop-types';\nimport { fetchMovieDetails } from '../../Service/api';\n\nfunction MovieDetails() {\n  const { movieId } = useParams();\n  const [movieDetails, setMovieDetails] = useState({});\n  const [showCast, setShowCast] = useState(false);\n  const [showReviews, setShowReviews] = useState(false);\n  const [posterUrl, setPosterUrl] = useState('');\n  const location = useLocation();\n\n\n  const backLinkHref = location.state?.from ?? \"/movies\";\n\n  const toggleCast = () => {\n    setShowCast(!showCast);\n    setShowReviews(false);\n  };\n\n  const toggleReviews = () => {\n    setShowReviews(!showReviews);\n    setShowCast(false);\n  };\n\n  const fetchMovieDetailsData = useCallback(async () => {\n    try {\n      const data = await fetchMovieDetails(movieId); \n      setMovieDetails(data);\n\n      if (data.poster_path) {\n        setPosterUrl(`https://image.tmdb.org/t/p/w500${data.poster_path}`);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }, [movieId]);\n\n  useEffect(() => {\n    fetchMovieDetailsData();\n  }, [movieId, fetchMovieDetailsData]);\n\n  if (!movieDetails || Object.keys(movieDetails).length === 0) {\n    return <div>Film nie istnieje.</div>;\n  }\n\n  return (\n    <div className={styles.movieDetailsContainer}>\n  \n      <Link to={backLinkHref}>BACK</Link>\n      \n      <div className={styles.boxContainer}>\n        {posterUrl && <img src={posterUrl} width=\"150px\" alt={`${movieDetails.title} Poster`} className={styles.posterContainer} />}\n        <div className={styles.contentContainer}>\n          <h2>Movie Details</h2>\n          <h3>Title: {movieDetails.title}</h3>\n          <p>Release Date: {movieDetails.release_date}</p>\n          <p>Overview: {movieDetails.overview}</p>\n        </div>\n      </div>\n\n      <div className={styles.buttonsContainer}>\n        <button onClick={toggleCast}>Toggle Cast</button>\n        <button onClick={toggleReviews}>Toggle Reviews</button>\n      </div>\n\n      {showCast && <Cast />}\n      {showReviews && <Reviews />}\n    </div>\n  );\n}\n\nMovieDetails.propTypes = {\n  movieId: PropTypes.string.isRequired,\n};\n\nexport default MovieDetails;\n","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { fetchMovieCast } from '../../Service/api'; \n\nfunction Cast() {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    const getCast = async () => {\n      try {\n        const castData = await fetchMovieCast(movieId);\n        setCast(castData);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    getCast();\n  }, [movieId]);\n\n  return (\n    <div>\n      <h2>Cast</h2>\n      <ul>\n        {cast.map((actor) => (\n          <li key={actor.id}>{actor.name}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nCast.propTypes = {\n  movieId: PropTypes.string.isRequired,\n};\n\nexport default Cast;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { fetchMovieReviews } from '../../Service/api'; \n\nfunction Reviews() {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  const getMovieReviews = useCallback(async () => {\n    try {\n      const reviewData = await fetchMovieReviews(movieId);\n      setReviews(reviewData);\n    } catch (error) {\n      console.error(error);\n    }\n  }, [movieId]);\n\n  useEffect(() => {\n    getMovieReviews();\n  }, [getMovieReviews]);\n\n  return (\n    <div>\n      <h2>Reviews</h2>\n      <ul>\n        {reviews.map((review) => (\n          <li key={review.id}>\n            <h3>{review.author}</h3>\n            <p>{review.content}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nReviews.propTypes = {\n  movieId: PropTypes.string.isRequired,\n};\n\nexport default Reviews;\n\n"],"names":["movieId","useParams","useState","movieDetails","setMovieDetails","showCast","setShowCast","showReviews","setShowReviews","posterUrl","setPosterUrl","backLinkHref","useLocation","state","from","fetchMovieDetailsData","useCallback","fetchMovieDetails","data","poster_path","console","error","useEffect","Object","keys","length","className","styles","to","src","width","alt","title","release_date","overview","onClick","Cast","Reviews","cast","setCast","getCast","fetchMovieCast","castData","map","actor","name","id","reviews","setReviews","getMovieReviews","fetchMovieReviews","reviewData","review","author","content"],"sourceRoot":""}