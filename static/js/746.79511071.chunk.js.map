{"version":3,"file":"static/js/746.79511071.chunk.js","mappings":"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","sources":["components/Cast/Cast.jsx","webpack://react-homework-template/./src/components/MovieDetails/MovieDatails.module.css?2bc7","components/MovieDetails/MovieDetails.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nfunction Cast() {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    const fetchMovieCast = async () => {\n      try {\n        const response = await fetch(`https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=6259da9bc5df5d51756d5e5542429946`);\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        setCast(data.cast);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    fetchMovieCast();\n  }, [movieId]);\n\n  return (\n    <div>\n      <h2>Cast</h2>\n      <ul>\n        {cast.map((actor) => (\n          <li key={actor.id}>{actor.name}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}\nCast.propTypes = {\n  movieId: PropTypes.string.isRequired,\n};\nexport default Cast;\n","// extracted by mini-css-extract-plugin\nexport default {\"movieDetailsContainer\":\"MovieDatails_movieDetailsContainer__xXQGa\",\"boxContainer\":\"MovieDatails_boxContainer__8krRx\",\"posterContainer\":\"MovieDatails_posterContainer__l3QaJ\",\"contentContainer\":\"MovieDatails_contentContainer__H7tKs\",\"buttonsContainer\":\"MovieDatails_buttonsContainer__OzEBs\"};","import React, { useState, useEffect, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Cast from '../Cast/Cast';\nimport Reviews from '../Reviews/Reviews';\nimport styles from './MovieDatails.module.css';\nimport PropTypes from 'prop-types';\nfunction MovieDetails() {\n  const { movieId } = useParams();\n  const [movieDetails, setMovieDetails] = useState({});\n  const [showCast, setShowCast] = useState(false);\n  const [showReviews, setShowReviews] = useState(false);\n  const [posterUrl, setPosterUrl] = useState('');\n\n  const fetchMovieDetails = useCallback(async () => {\n    try {\n      const response = await fetch(`https://api.themoviedb.org/3/movie/${movieId}?api_key=6259da9bc5df5d51756d5e5542429946`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      setMovieDetails(data);\n\n      if (data.poster_path) {\n        setPosterUrl(`https://image.tmdb.org/t/p/w500${data.poster_path}`);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }, [movieId]);\n\n  const toggleCast = () => {\n    setShowCast(!showCast);\n    setShowReviews(false);\n  };\n\n  const toggleReviews = () => {\n    setShowReviews(!showReviews);\n    setShowCast(false);\n  };\n\n  useEffect(() => {\n    fetchMovieDetails();\n  }, [movieId, fetchMovieDetails]);\n\n  if (!movieDetails || Object.keys(movieDetails).length === 0) {\n    return <div>Film nie istnieje.</div>;\n  }\n\n  return (\n    <div className={styles.movieDetailsContainer}>\n      <div className={styles.boxContainer}>\n        {posterUrl && <img src={posterUrl} width=\"150px\" alt={`${movieDetails.title} Poster`} className={styles.posterContainer} />}\n        <div className={styles.contentContainer}>\n          <h2>Movie Details</h2>\n          <h3>Title: {movieDetails.title}</h3>\n          <p>Release Date: {movieDetails.release_date}</p>\n          <p>Overview: {movieDetails.overview}</p>\n        </div>\n      </div>\n\n      <div className={styles.buttonsContainer}>\n        <button onClick={toggleCast}>Toggle Cast</button>\n        <button onClick={toggleReviews}>Toggle Reviews</button>\n      </div>\n\n      {showCast && <Cast />}\n      {showReviews && <Reviews />}\n    </div>\n  );\n}MovieDetails.propTypes = {\n  movieId: PropTypes.string.isRequired, \n};\nexport default MovieDetails;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nfunction Reviews() {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  const fetchMovieReviews = useCallback(async () => {\n    try {\n      const response = await fetch(`https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=6259da9bc5df5d51756d5e5542429946`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      setReviews(data.results);\n    } catch (error) {\n      console.error(error);\n    }\n  }, [movieId]);\n\n  useEffect(() => {\n    fetchMovieReviews();\n  }, [fetchMovieReviews]);\n\n  return (\n    <div>\n      <h2>Reviews</h2>\n      <ul>\n        {reviews.map((review) => (\n          <li key={review.id}>\n            <h3>{review.author}</h3>\n            <p>{review.content}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\nReviews.propTypes = {\n  movieId: PropTypes.string.isRequired, \n};\nexport default Reviews;\n"],"names":["movieId","useParams","useState","cast","setCast","useEffect","fetchMovieCast","fetch","response","ok","Error","json","data","console","error","map","actor","name","id","movieDetails","setMovieDetails","showCast","setShowCast","showReviews","setShowReviews","posterUrl","setPosterUrl","fetchMovieDetails","useCallback","poster_path","Object","keys","length","className","styles","src","width","alt","title","release_date","overview","onClick","Cast","Reviews","reviews","setReviews","fetchMovieReviews","results","review","author","content"],"sourceRoot":""}